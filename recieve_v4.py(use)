import cv2
import socket
import struct
import numpy as np

# Set up socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 8080))
server_socket.listen(5)

print("Waiting for connection...")

def receive_video(conn):
    data = b""
    payload_size = struct.calcsize("Q")
    
    # Create windows for both cameras
    cv2.namedWindow("Camera 1", cv2.WINDOW_NORMAL)
    cv2.namedWindow("Camera 2", cv2.WINDOW_NORMAL)

    try:
        while True:
            # Receive data
            while len(data) < (payload_size + 1):  # +1 for camera ID
                packet = conn.recv(4096)
                if not packet:
                    print("Client disconnected.")
                    return
                data += packet

            # Extract camera ID (1 byte)
            camera_id = data[0]
            data = data[1:]
            
            # Extract frame size (8 bytes)
            packed_msg_size = data[:payload_size]
            data = data[payload_size:]
            msg_size = struct.unpack("Q", packed_msg_size)[0]

            # Receive the rest of the frame data
            while len(data) < msg_size:
                data += conn.recv(4096)

            frame_data = data[:msg_size]
            data = data[msg_size:]

            # Decode JPEG frame
            frame = cv2.imdecode(np.frombuffer(frame_data, dtype=np.uint8), cv2.IMREAD_COLOR)

            # Draw lines and text only on Camera 1
            if camera_id == 1:
                height, width, _ = frame.shape
                
                # Calculate the center of the image
                center_x = width // 2
                center_y = height // 2

                # Set new shorter length (1/3 shorter than the original)
                line_length = 100  # Original line length (100 pixels)
                reduced_length = int(line_length)  # Reduce length by 1/3

                # Draw the yellow line (vertical) - starting from the center, going up
                cv2.line(frame, (center_x, center_y - reduced_length), (center_x, center_y), (0, 255, 255), 2)  # Yellow

                # Draw the red line (vertical) - starting from where yellow line ends
                cv2.line(frame, (center_x, center_y), (center_x, center_y + reduced_length), (0, 0, 255), 2)  # Red

                # Add the "7.5 cm" text
                font = cv2.FONT_HERSHEY_SIMPLEX
                cv2.putText(frame, "7.5 cm", (center_x + 10, center_y - reduced_length ), font, 0.5, (0, 255, 255), 2)  # Yellow
                cv2.putText(frame, "7.5 cm", (center_x + 10, center_y + reduced_length + 10), font, 0.5, (0, 0, 255), 2)  # Red

            # Display in appropriate window
            if camera_id == 1:
                cv2.imshow("Camera 1", frame)
            elif camera_id == 2:
                cv2.imshow("Camera 2", frame)

            if cv2.waitKey(1) & 0xFF == ord("q"):
                print("Stopping stream...")
                return

    except (ConnectionResetError, BrokenPipeError):
        print("Connection lost. Waiting for new connection...")
        return
    finally:
        cv2.destroyAllWindows()

while True:
    conn, addr = server_socket.accept()
    print(f"Connected to {addr}")
    receive_video(conn)
    conn.close()

server_socket.close()
cv2.destroyAllWindows()
